name: iOS Deploy

on:
  push:
    branches: [ develop, release/*, main ]
  workflow_dispatch:
    
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Deploy build to TestFlight
    runs-on: self-hosted
    
    steps:
      - name: Add path globally
        run: echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: 'true'
          
      - name: Check Dependencies
        uses: GetSidetrack/action-xcodeproj-spm-update@main
        with:
          workspace: 'OneLogin.xcworkspace'
          scheme: 'OneLogin'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.PROD_SECRETS_AWS_ROLE_TO_ASSUME }}
          
      - name: Store ENV from AWS SecretManager
        id: secrets
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_DEFAULT_REGION: "eu-west-2"
          SECRET_NAME: "di-mobile-ios-onelogin-app/github-actions"

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Set Default Configuration
        env:
          LC_ALL: "en_US.UTF-8"
          LANG: "en_US.UTF-8"
        run: |
          gitbranch=$(echo ${GITHUB_REF:-dev} | sed s/refs\\/heads\\///g)
          echo Pushed to branch: $gitbranch
          
          export GEM_HOME=$HOME/.gem
          export GEM_PATH=$HOME/.gem
          
          bundle install

          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
          CERTIFICATE_PASSWORD="${{env.AWS_SECRET_SIGNING_KEY_PASSWORD}}"
          APIKEY_PATH=$RUNNER_TEMP/apikey.p8

          # import certificates from secrets
          echo -n "${{env.AWS_SECRET_DISTRIBUTION_P12_ENCODED}}" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "${{env.AWS_SECRET_AUTH_KEY_P8_ENCODED}}" | base64 --decode --output $APIKEY_PATH

          if [ "$gitbranch" = "develop" ];
          then
            bundle exec fastlane run add_badge alpha:true
          elif [[ $gitbranch == release/* ]];
          then
            bundle exec fastlane run add_badge
          fi

          if [ "$gitbranch" = "main" ];
          then
            configuration="Release"

            echo Deploying $configuration configuration
            bundle exec fastlane prerelease configuration:$configuration \
              certificate_path:$CERTIFICATE_PATH certificate_password:$CERTIFICATE_PASSWORD \
              apikey_path:$APIKEY_PATH
            bundle exec fastlane prerelease configuration:"Integration" \
              certificate_path:$CERTIFICATE_PATH certificate_password:$CERTIFICATE_PASSWORD \
              apikey_path:$APIKEY_PATH
          else
            bundle exec fastlane prerelease configuration:"Staging" \
              certificate_path:$CERTIFICATE_PATH certificate_password:$CERTIFICATE_PASSWORD \
              apikey_path:$APIKEY_PATH --verbose
          fi
          
        # upload failure log if fails
      - uses: actions/upload-artifact@v1
        name: upload failure fastlane build log
        if: failure()
        with:
          name: IDCheck.log
          path: /Users/ec2-user/Library/Logs/gym/Biometrics-Identity.log

      - name: Make Artefact
        run: |
          zip artefact OneLogin.ipa OneLogin.app.dSYM.zip
      - uses: actions/upload-artifact@v1
        with:
          name: artefact.zip
          path: ./artefact.zip

